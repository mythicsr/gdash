package dao

import (
	"code.inke.cn/BackendPlatform/golang/logging"
	"code.inke.cn/gz/server/sevenseven/sevenseven.common.api/define"
	"code.inke.cn/gz/server/sevenseven/sevenseven.common.api/testmain/model/mysql_bbb"
	"context"
	"fmt"
	"time"
)

func (d *Dao) BBBInitTable(ctx context.Context) {
	go func() {
		tk := time.NewTicker(1 * time.Hour)
		for true {
			_ = d.BBBCreateTable(ctx)
			<-tk.C
		}
	}()
}

func (d *Dao) BBBCreateTable(ctx context.Context) error {
	sTime := time.Now().AddDate(0, 0, -2)
	eTime := time.Now().AddDate(0, 0, 2)
	tableNames := mysql_bbb.GetRecentTableNames(mysql_bbb.OriginTableName, mysql_bbb.TableNameDivideMode, sTime, eTime)

	for _, tbName := range tableNames {
		sql := fmt.Sprintf("CREATE TABLE IF NOT EXISTS `%s` LIKE `%s`", tbName, mysql_bbb.OriginTableName)
		err := d.ssDB.Master(ctx).Exec(sql).Error
		if err != nil {
			logging.Errorf("create table fail|err=%v", err)
		}
	}

	return nil
}

func (d *Dao) BBBCreateOne(ctx context.Context, row *mysql_bbb.BBB) *mysql_bbb.BBB {
	tbName := mysql_bbb.GetCurrentTableName()
	err := d.ssDB.Master(ctx).Table(tbName).Create(row).Error
	if err != nil {
		logging.Errorf("mysql fail|err=%v", err)
	}
	return row
}

func (d *Dao) BBBQueryOne(ctx context.Context, id int64) *mysql_bbb.BBB {
	tbName := mysql_bbb.GetCurrentTableName()
	var rows []mysql_bbb.BBB
	sql := fmt.Sprintf("select * from `%s` where id=%d", tbName, id)

	err := d.ssDB.Master(ctx).Table(tbName).Raw(sql).Find(&rows).Error
	if err != nil {
		logging.Errorf("mysql fail|err=%v", err)
		return nil
	}
	if len(rows) > 0 {
		return &rows[0]
	}
	return nil
}

func (d *Dao) BBBQueryMany(ctx context.Context) []mysql_bbb.BBB {
	rows := make([]mysql_bbb.BBB, 0)
	sTime := time.Now().AddDate(0, 0, -2)
	eTime := time.Now().AddDate(0, 0, 2)

	tbNames := mysql_bbb.GetRecentTableNames(mysql_bbb.OriginTableName, mysql_bbb.TableNameDivideMode, sTime, eTime)

	for _, tb := range tbNames {
		_rows := make([]mysql_bbb.BBB, 0)
		sql := fmt.Sprintf("select * from `%s` where uid>0", tb)

		err := d.ssDB.Master(ctx).Table(tb).Raw(sql).Find(&_rows).Error
		if err != nil {
			logging.Errorf("mysql fail|err=%v", err)
			continue
		}

		rows = append(rows, _rows...)
	}

	return rows
}

// 更新某一列，零值不更新
func (d *Dao) BBBUpdateStatus(ctx context.Context, status int) error {
	tbName := mysql_bbb.GetCurrentTableName()
	sql := fmt.Sprintf("UPDATE `%s` SET status=%d", tbName, status)
	err := d.ssDB.Master(ctx).Table(tbName).Update(sql).Error
	return err
}

// 更新所有字段，包括零值
func (d *Dao) BBBSave(ctx context.Context, row *mysql_bbb.BBB) (*mysql_bbb.BBB, error) {
	tbName := mysql_bbb.GetCurrentTableName()
	rt := d.ssDB.Master(ctx).Table(tbName).Where("updated_at=?", row.UpdatedAt).Save(&row)
	err := rt.Error

	if rt.RowsAffected == 0 {
		return row, define.ErrUpdatedByOther
	}

	return row, err
}
